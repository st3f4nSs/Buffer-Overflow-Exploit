Stroescu Tudor Stefan -- 325CC


Cerinta 1:
	- buffer overflow in functia cu adresa 0x08049312. Se citesc 393 de caractere.

Cerinta2:
	- flag:   NICE_FLAG{ab861d67195ec6a920fe8794ae2f9f41}.
	- citim 642 de caractere random( pentru prima functie 177, pentru a doua 268). In functia unde se produce
		overflow-ul citim 197 de caractere(dimensiunea vectorului) iar urmatorii 4 octeti adresa functiei print flag 
		( 0x08049291) pentru a suprascrie valoarea variabilei (code *local_c8), care initial contine adresa functiei
		"local_c8 = FUN_080492c8".

Cerinta 3:
	- flag:    NAUGHTY_FLAG{a6330138bdf78e535765c9d209e2e841}
	- aproximativ acelasi rationament cu cel de la cerinta 2.
	- pentru prima functie am citit 94 de caractere random, apoi am suprascris valoarea variabilei local_111 pentru 
		a fi egala cu 0x72b9edf2, deoarece in cazul in care nu este egala se va intra in "if" si programul se va termina.
		Apoi am citit alte 152-94-4 = 54 caractere random ( se apeleaza read-ul cu 152). Analog pentru celelalte 4 functii,
		evident cu alt numar de caractere citite, alta valoarea de suprascris pentru variabila locala. La primele 5 functii 
		nu pot suprascrie adresa de retur deoarece se aloca mai mult spatiu pe stiva decat caractere citite. De aceea sunt
		nevoit sa trec prin cele 5 functii pana ajung la cea de-a 6 functie si sa modific valoarea celui de-al doilea parametru.
	- la functia a 6 - a(0x080493b6 ) citesc 315 caractere, urmatorii 4 octeti suprascriu valoarea variabilei local_44( din cauza if-ului).
		 Cum in codul ASM observam ca se aloca 379 de octeti, completam restul de 379 - 315 - 4 = 60 de octeti cu caractere random,
		apoi inca 12 octeti( ebp + 12 - parametrul al 2-lea al functiei) cu caractere random si apoi 4 octeti pentru a suprascrie
		valoarea celui de-al 2 -lea parametru al functiei reprezentand adresa functiei print_flag(0x08049291).

Precizare: am rezolvat tema pentru binarele din cea de-a doua descarcare.
